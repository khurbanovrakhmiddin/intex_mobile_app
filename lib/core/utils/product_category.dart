import 'package:easy_localization/easy_localization.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:intex_mobile_app/core/models/Catalog_model.dart';import 'package:intex_mobile_app/core/repository/product_by_status_repository.dart';import 'package:intex_mobile_app/core/utils/custom_card.dart';import 'package:intex_mobile_app/core/utils/dialogs/cart_dialog.dart';import 'package:intex_mobile_app/core/utils/loading_page_skeleton.dart';import 'package:intex_mobile_app/features/screens/cart_page/first_bloc/first_product_bloc.dart';import 'package:intex_mobile_app/features/screens/cart_page/second_bloc/second_product_bloc.dart';import 'package:intex_mobile_app/features/screens/cart_page/third_bloc/third_product_bloc.dart';import 'package:intex_mobile_app/features/screens/main_page/bloc/main_bloc.dart';import 'package:lazy_load_scrollview/lazy_load_scrollview.dart';class FirstProductCategory extends StatelessWidget {  final int id;  const FirstProductCategory({    Key? key,    required this.id,  }) : super(key: key);  @override  Widget build(BuildContext context) {    context.read<FirstProductBloc>().add(ProductFirstGetByStatusEvent(id)); return    Column(   crossAxisAlignment: CrossAxisAlignment.start,   mainAxisSize: MainAxisSize.min,   children: [     Padding(       padding: const EdgeInsets.symmetric(horizontal: 20),       child: Text(         context             .read<MainBloc>()             .repository             .status(id, context.locale.languageCode) ??             'null',         style: Theme.of(context)             .textTheme             .headline2             ?.copyWith(fontSize: 18),       ),     ),     const SizedBox(       height: 29,     ),     LazyLoadScrollView(       key: const PageStorageKey<String>('first'),       scrollDirection: Axis.horizontal,       onEndOfPage: ()=>context.read<FirstProductBloc>().add(ProductFirstGetByStatusEvent(id)),       child: BlocBuilder<FirstProductBloc, FirstProductState>(         builder: (context, state) {           if(state is ProductFirstLoadingState){             return SingleChildScrollView(                 scrollDirection: Axis.horizontal,                 child: Row(                   mainAxisAlignment: MainAxisAlignment.start,                   children:  [                     const SizedBox(width: 20,),                     LoadingPage(width: 220,),                     const SizedBox(width: 20,),                     LoadingPage(width: 220),                     const SizedBox(width: 20,),                     LoadingPage(width: 220),                   ],                 ));           }           if(state is ProductFirstLoaded){             return Align(                 alignment: Alignment.centerLeft,                 child: SingleChildScrollView(                     scrollDirection: Axis.horizontal,                     child: Row(                       mainAxisAlignment: MainAxisAlignment.start,                       children:                       List.generate(state.catalog.length, (index) {                         Catalog catalog = state.catalog[index];                         return CustomCard(                             onPressed: () => cartDialog(                                 context: context, catalog: catalog),                             catalog: catalog);                       }),                     )));           }           return SingleChildScrollView(               scrollDirection: Axis.horizontal,               child: Row(                 mainAxisAlignment: MainAxisAlignment.start,                 children:  [                   const SizedBox(width: 20,),                   LoadingPage(width: 220,),                   const SizedBox(width: 20,),                   LoadingPage(width: 220),                   const SizedBox(width: 20,),                   LoadingPage(width: 220),                 ],               ));         },       ),     )   ], );  }}class SecondProductCategory extends StatelessWidget {  final int id;  const SecondProductCategory({Key? key, required this.id})      : super(key: key);  @override  Widget build(BuildContext context) {    context.read<SecondProductBloc>().add      (ProductSecondGetByStatusEvent      (id));    return Column(      crossAxisAlignment: CrossAxisAlignment.start,      mainAxisSize: MainAxisSize.min,      children: [        Padding(          padding: const EdgeInsets.symmetric(horizontal: 20),          child: Text(            context                .read<MainBloc>()                .repository                .status(id, context.locale.languageCode) ??                'null',            style: Theme.of(context)                .textTheme                .headline2                ?.copyWith(fontSize: 18),          ),        ),        const SizedBox(          height: 29,        ),        LazyLoadScrollView(          key: const PageStorageKey<String>('first'),          scrollDirection: Axis.horizontal,          onEndOfPage: ()=>context.read<SecondProductBloc>().add            (ProductSecondGetByStatusEvent(id)),          child: BlocBuilder<SecondProductBloc, SecondProductState>(            builder: (context, state) {              if(state is ProductSecondLoadingState){                return SingleChildScrollView(                    scrollDirection: Axis.horizontal,                    child: Row(                      mainAxisAlignment: MainAxisAlignment.start,                      children:  [                        const SizedBox(width: 20,),                        LoadingPage(width: 220,),                        const SizedBox(width: 20,),                        LoadingPage(width: 220),                        const SizedBox(width: 20,),                        LoadingPage(width: 220),                      ],                    ));              }              if(state is ProductSecondLoaded){                return Align(                    alignment: Alignment.centerLeft,                    child: SingleChildScrollView(                        scrollDirection: Axis.horizontal,                        child: Row(                          mainAxisAlignment: MainAxisAlignment.start,                          children:                          List.generate(state.catalog.length, (index) {                            Catalog catalog = state.catalog[index];                            return CustomCard(                                onPressed: () => cartDialog(                                    context: context, catalog: catalog),                                catalog: catalog);                          }),                        )));              }         return SingleChildScrollView(                  scrollDirection: Axis.horizontal,                  child: Row(                    mainAxisAlignment: MainAxisAlignment.start,                    children:  [                      const SizedBox(width: 20,),                      LoadingPage(width: 220,),                      const SizedBox(width: 20,),                      LoadingPage(width: 220),                      const SizedBox(width: 20,),                      LoadingPage(width: 220),                    ],                  ));            },          ),        )      ],    );  }}class ThirdProductCategory extends StatelessWidget {  final int id;  const ThirdProductCategory({Key? key, required this.id})      : super(key: key);  @override  Widget build(BuildContext context) {    context.read<ThirdProductBloc>().add(ProductThirdGetByStatusEvent      (id));    return Column(      crossAxisAlignment: CrossAxisAlignment.start,      mainAxisSize: MainAxisSize.min,      children: [        Padding(          padding: const EdgeInsets.symmetric(horizontal: 20),          child: Text(            context                .read<MainBloc>()                .repository                .status(id, context.locale.languageCode) ??                'null',            style: Theme.of(context)                .textTheme                .headline2                ?.copyWith(fontSize: 18),          ),        ),        const SizedBox(          height: 29,        ),        LazyLoadScrollView(          key: const PageStorageKey<String>('first'),          scrollDirection: Axis.horizontal,          onEndOfPage: ()=>context.read<ThirdProductBloc>().add            (ProductThirdGetByStatusEvent(id)),          child: BlocBuilder<ThirdProductBloc, ThirdProductState>(            builder: (context, state) {              if(state is ProductThirdLoadingState){                return SingleChildScrollView(                    scrollDirection: Axis.horizontal,                    child: Row(                      mainAxisAlignment: MainAxisAlignment.start,                      children:  [                        const SizedBox(width: 20,),                        LoadingPage(width: 220,),                        const SizedBox(width: 20,),                        LoadingPage(width: 220),                        const SizedBox(width: 20,),                        LoadingPage(width: 220),                      ],                    ));              }              if(state is ProductThirdLoaded){                return Align(                    alignment: Alignment.centerLeft,                    child: SingleChildScrollView(                        scrollDirection: Axis.horizontal,                        child: Row(                          mainAxisAlignment: MainAxisAlignment.start,                          children:                          List.generate(state.catalog.length, (index) {                            Catalog catalog = state.catalog[index];                            return CustomCard(                                onPressed: () => cartDialog(                                    context: context, catalog: catalog),                                catalog: catalog);                          }),                        )));              }              return SingleChildScrollView(                  scrollDirection: Axis.horizontal,                  child: Row(                    mainAxisAlignment: MainAxisAlignment.start,                    children:  [                      const SizedBox(width: 20,),                      LoadingPage(width: 220,),                      const SizedBox(width: 20,),                      LoadingPage(width: 220),                      const SizedBox(width: 20,),                      LoadingPage(width: 220),                    ],                  ));            },          ),        )      ],    );  }}//// SingleChildScrollView(// scrollDirection: Axis.horizontal,child:BlocBuilder<ProductsBloc,ProductsState>(builder:// (context,state){// if(state is ProductFirstLoaded){// return Row(children: List.generate(state.catalog.length, (index){//// Catalog catalog = state.catalog[index];//// return  CustomCard(onPressed: () =>cartDialog// (context: context, catalog: catalog),catalog:// catalog);//// }),);// }// return  CircularProgressIndicator();// return ListView.builder(// itemCount: 4,// scrollDirection: Axis.horizontal,// itemBuilder: (context, position) {// return  CircularProgressIndicator();// },// );//// },),// )
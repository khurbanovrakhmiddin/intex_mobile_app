import 'package:easy_localization/easy_localization.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:intex_mobile_app/core/models/Catalog_model.dart';import 'package:intex_mobile_app/core/utils/custom_card.dart';import 'package:intex_mobile_app/core/utils/dialogs/cart_dialog.dart';import 'package:intex_mobile_app/core/utils/loading_page_skeleton.dart';import 'package:intex_mobile_app/features/screens/cart_page/bloc/products_bloc.dart';import 'package:intex_mobile_app/features/screens/main_page/bloc/main_bloc.dart';import 'package:lazy_load_scrollview/lazy_load_scrollview.dart';class FirstProductCategory extends StatelessWidget {  final int id;  const FirstProductCategory({    Key? key,    required this.id,  }) : super(key: key);  @override  Widget build(BuildContext context) {    print(context        .read<MainBloc>()        .repository        .status(3, context.locale.languageCode));        context.read<ProductsBloc>().add(ProductFirstGetByStatusEvent(id));    return Column(      crossAxisAlignment: CrossAxisAlignment.start,      mainAxisSize: MainAxisSize.min,      children: [        Padding(          padding: const EdgeInsets.symmetric(horizontal: 20),          child: Text(            context                .read<MainBloc>()                .repository                .status(id, context.locale.languageCode) ??                'null',            style: Theme.of(context)                .textTheme                .headline2                ?.copyWith(fontSize: 18),          ),        ),        const SizedBox(          height: 29,        ),        LazyLoadScrollView(          key: const PageStorageKey<String>('first'),          scrollDirection: Axis.horizontal,          onEndOfPage: ()=>context.read<ProductsBloc>().add(ProductFirstGetByStatusEvent(id)),          child: BlocBuilder<ProductsBloc, ProductsState>(            builder: (context, state) {              if (state is ProductFirstLoaded) {                return Align(                    alignment: Alignment.centerLeft,                    child: SingleChildScrollView(                    scrollDirection: Axis.horizontal,                    child: Row(                  mainAxisAlignment: MainAxisAlignment.start,                  children:                      List.generate(state.catalog.length, (index) {                    Catalog catalog = state.catalog[index];                    return CustomCard(                        onPressed: () => cartDialog(                            context: context, catalog: catalog),                        catalog: catalog);                  }),                )));              }              return SingleChildScrollView(                  scrollDirection: Axis.horizontal,                  child: Row(                mainAxisAlignment: MainAxisAlignment.start,                children:  [                  const SizedBox(width: 20,),                  LoadingPage(width: 220,),                  const SizedBox(width: 20,),                  LoadingPage(width: 220),                  const SizedBox(width: 20,),                  LoadingPage(width: 220),                ],              ));            },          ),        )      ],    );  }}class SecondProductCategory extends StatelessWidget {  final int id;  const SecondProductCategory({Key? key, required this.id})      : super(key: key);  @override  Widget build(BuildContext context) {    String? type = context            .read<MainBloc>()            .repository            .status(id, context.locale.languageCode) ??        '';    return Column(      crossAxisAlignment: CrossAxisAlignment.start,      children: [        Padding(          padding: const EdgeInsets.symmetric(horizontal: 20),          child: Text(            type,            style: Theme.of(context)                .textTheme                .headline2                ?.copyWith(fontSize: 18),          ),        ),        const SizedBox(          height: 29,        ),        ListView.builder(          shrinkWrap: true,    scrollDirection: Axis.horizontal,            itemCount: 10,            itemBuilder: (c,s){        return  CircularProgressIndicator();        })      ],    );  }}class ThirdProductCategory extends StatelessWidget {  final int id;  const ThirdProductCategory({Key? key, required this.id})      : super(key: key);  @override  Widget build(BuildContext context) {    String? type = context            .read<MainBloc>()            .repository            .status(id, context.locale.languageCode) ??        '';    return Column(      crossAxisAlignment: CrossAxisAlignment.start,      children: [        Padding(          padding: const EdgeInsets.symmetric(horizontal: 20),          child: Text(            type,            style: Theme.of(context)                .textTheme                .headline2                ?.copyWith(fontSize: 18),          ),        ),        const SizedBox(          height: 29,        ),        LazyLoadScrollView(          onEndOfPage: () => context              .read<ProductsBloc>()              .add(ProductFirstGetByStatusEvent(id)),          child: BlocBuilder<ProductsBloc, ProductsState>(            builder: (context, state) {              if (state is ProductThirdLoaded) {                return ListView.builder(                  itemCount: state.catalog.length,                  itemBuilder: (context, position) {                    Catalog catalog = state.catalog[position];                    return CustomCard(                        onPressed: () => cartDialog(                            context: context, catalog: catalog),                        catalog: catalog);                  },                );              }              return ListView.builder(                itemCount: 4,                itemBuilder: (context, position) {                  return LoadingPage();                },              );            },          ),        ),      ],    );  }}//// SingleChildScrollView(// scrollDirection: Axis.horizontal,child:BlocBuilder<ProductsBloc,ProductsState>(builder:// (context,state){// if(state is ProductFirstLoaded){// return Row(children: List.generate(state.catalog.length, (index){//// Catalog catalog = state.catalog[index];//// return  CustomCard(onPressed: () =>cartDialog// (context: context, catalog: catalog),catalog:// catalog);//// }),);// }// return  CircularProgressIndicator();// return ListView.builder(// itemCount: 4,// scrollDirection: Axis.horizontal,// itemBuilder: (context, position) {// return  CircularProgressIndicator();// },// );//// },),// )
import 'package:dio/dio.dart';import 'package:equatable/equatable.dart';import 'package:intex_mobile_app/core/models/Catalog_model.dart';import 'package:intex_mobile_app/core/models/Order.dart';import 'package:intex_mobile_app/core/service/network_service.dart';import 'package:intex_mobile_app/core/service/query.dart';abstract class ICartRepository extends Equatable {  Future sendOrder({required String name,required String phone, required String address}) async {}}class CartRepository extends ICartRepository {  Bascet bascet = Bascet(      count: 1,      product_id: 0,      order_id: 0,      location: Cordinat(latitude: 0, longitude: 0));  late Catalog catalog;  CartRepository(this.catalog) {    bascet.product_id = catalog.id;  }  void addCount() {    bascet.count++;  }  void removeCount() {    if (bascet.count >= 2) {      bascet.count--;    }  }  @override  Future sendOrder({required String name,required String phone, required String address})  async {    Order order = Order(name: name, phone: phone, address: address,      );Map<String,dynamic> create =  {  "order": {    "name": name,    "phone":  "+998$phone",    "address": address,    "location": {      "x": bascet.location.longitude,      "y": bascet.location.latitude    },    "order_number": "0",    "status_id": 0  },  "bascet": [    {      "count": bascet.count,      "product_id": bascet.product_id,      "order_id": 0    }  ]};print(create);print(create);print(create);print(create);print(create);    String fullText = " Name: $name ${r"%0A\u{2705}"} PhoneNumber:"        " ${r"\u{FF0B}"}+998$phone ${r"\u{FF0B}"}Address: $address ";    QueryParams params = QueryParams();    params.append("chat_id",NetworkService.TELEGRAM_CHAT_ID);    params.append("text",fullText);    params.append("address",fullText);    Response response = await NetworkService.POST(        NetworkService.APi_POST_ORDER_CREATE,        create);    if (response.statusCode == 200 || response.statusCode == 201) {      await NetworkService.SENDTELEGRAMBOT(NetworkService.APi_TELEGRAM_BOT, params          .params);      return true;    }    return response.statusCode;  }  @override  List<Object?> get props => [bascet];}
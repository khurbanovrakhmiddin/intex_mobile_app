import 'dart:async';import 'package:bloc/bloc.dart';import 'package:equatable/equatable.dart';import 'package:intex_mobile_app/core/models/Catalog_model.dart';import 'package:intex_mobile_app/core/models/Category.dart';import 'package:intex_mobile_app/core/service/query.dart';import 'package:intex_mobile_app/features/screens/detail_page/reository/cart_repository.dart';part 'cart_event.dart';part 'cart_state.dart';class CartBloc extends Bloc<CartEvent, CartState> {  final Category category;  List<Catalog> catalogs = [];  int page = -1;  int limit = 10;  RepositoryCart repository = RepositoryCart();  CartBloc(this.category) : super(CartInitial()) {    on<LoadingEvent>(_getItemByCategory);  }  FutureOr<void> _getItemByCategory(      LoadingEvent event,Emitter<CartState> emit      )async{    try{      page++;      emit(Loading());      QueryParams params = QueryParams();      params.append('id',category.id.toString(),);      params.append('page',page.toString(),);      params.append( 'limit',limit.toString());    List<Catalog> list = await  repository.getCatalogs(params);      catalogs.addAll(list);       if(list.isEmpty){         page--;         emit(LoadedCatalogState(catalogs));       }else{         emit(LoadedCatalogState(catalogs)) ;      }    }catch(e){      page--;      emit(const ErrorState('Field to Fetch'));    }  }}
import 'dart:async';import 'package:bloc/bloc.dart';import 'package:equatable/equatable.dart';import 'package:intex_mobile_app/core/models/Catalog_model.dart';import 'package:intex_mobile_app/core/models/Category.dart';import 'package:intex_mobile_app/features/screens/detail_page/reository/cart_repository.dart';part 'cart_event.dart';part 'cart_state.dart';class CartBloc extends Bloc<CartEvent, CartState> {  final Category category;  List<Catalog> catalogs = [];  int page = -1;  int limit = 10;  RepositoryCart repository = RepositoryCart();  CartBloc(this.category) : super(CartInitial()) {    on<LoadingEvent>(_getitemByCategory);  }  FutureOr<void> _getitemByCategory(      LoadingEvent event,Emitter<CartState> emit      )async{    try{      page++;      emit(Loading());      print('page $page');    List<Catalog> list = await  repository.getCatalogs({      'id':category.category_id,      'page':page,      'limit':limit    });    print(list.length);       if(list.isEmpty){         page--;         emit(LoadedCatalogState(list));       }else{      catalogs .addAll(list);         emit(LoadedCatalogState(catalogs)) ;      }    }catch(e){      page--;      emit(const ErrorState('Field to Fetch'));    }  }}
import 'dart:async';import 'dart:convert';import 'package:bloc/bloc.dart';import 'package:dio/dio.dart';import 'package:equatable/equatable.dart';import 'package:intex_mobile_app/core/models/Catalog_model.dart';import 'package:intex_mobile_app/core/repository/catalog_repository.dart';part 'main_event.dart';part 'main_state.dart';class MainBloc extends Bloc<MainEvent, MainState> {  final Repository repository;  MainBloc({required this.repository})      : super(LoadingAllDataState()) {    on<MainInitialEvent>(_initialData);    on<MainGetEvent>(_getData);    on<MainGetCategoryEvent>(_getDataByCategory);    on<MainRequestConsultEvent>(_requestConsult);  }  FutureOr<void> _getData(      MainGetEvent event, Emitter<MainState> emit) async {    emit(MainLoadingState());    try {      // data =    await repository.loadCatalog();      // print(data.length);    } catch (e) {      //emit(MainGetDataState(data));      // emit(MainErrorState(e.toString()));    }  }  FutureOr<void> _getDataByCategory(      MainGetCategoryEvent event, Emitter<MainState> emit) async {    emit(MainGetDataByCategoriesState(event.categoryID));  }  FutureOr<void> _initialData(      MainInitialEvent event, Emitter<MainState> emit) async {    try {      emit(LoadingAllDataState());      await repository.getSocial();      await repository.getContacts();      await repository.getCategories();      await repository.getProductsStatus();      emit(MainInitial());    } catch (e) {      emit(MainErrorState(e.toString()));    }  }  FutureOr<void> _requestConsult(      MainRequestConsultEvent event, Emitter<MainState> emit) async {    try {if(event.validate){  emit(RequestedConsultState());  await repository.requestConsult(event.name, event.phone);  emit(MainRequestedConsultState());}else{  emit(RequestedConsultFlaureState());}    } catch (e) {      if (e is DioError) {        print(e.response!.statusMessage);        print(e.response!.statusMessage);        print(e.response!.statusMessage);        print(e.response!.statusMessage);        print(e.response!.statusMessage);        print(e.response!.statusMessage);        print(e.response!.statusMessage);        emit(MainRequestConsultErrorState(Map<String, dynamic>.from(                jsonDecode(e.response.toString()))['message']            .toString()));      } else {        emit(MainRequestConsultErrorState(e.toString()));      }    }  }}
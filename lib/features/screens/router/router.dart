import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:bloc/bloc.dart';enum MyEvent { eventA, eventB }abstract class MyState {}class StateA extends MyState {}class StateB extends MyState {}class MyBloc extends Bloc<MyEvent, MyState> {  MyBloc(super.initialState);  @override  MyState get initialState => StateA();  @override  Stream<MyState> mapEventToState(MyEvent event) async* {    switch (event) {      case MyEvent.eventA:        yield StateA();        break;      case MyEvent.eventB:        yield StateB();        break;    }  }}class PageA extends StatelessWidget {  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: Text('Page A'),      ),      body: Center(        child: TextButton(          child: Text('Go to PageB'),          onPressed: () {            BlocProvider.of<MyBloc>(context).add(MyEvent.eventB);          },        ),      ),    );  }}class PageB extends StatelessWidget {  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: Text('Page B'),      ),      body: Center(        child: TextButton(          child: Text('Go to PageA'),          onPressed: () {            BlocProvider.of<MyBloc>(context).add(MyEvent.eventA);          },        ),      ),    );  }}
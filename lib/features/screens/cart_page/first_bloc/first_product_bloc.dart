import 'dart:async';import 'package:bloc/bloc.dart';import 'package:equatable/equatable.dart';import 'package:intex_mobile_app/core/models/Catalog_model.dart';import 'package:intex_mobile_app/core/repository/product_by_status_repository.dart';import 'package:intex_mobile_app/core/service/query.dart';part 'first_product_event.dart';part 'first_product_state.dart';class FirstProductBloc extends Bloc<FirstProductEvent, FirstProductState> {  List<Catalog> first = [];  int firstPage =-1;  final int limit = 4;  final ProductByStatusRepository repository;  FirstProductBloc(this.repository) : super(FirstProductInitial()) {    on<ProductFirstGetByStatusEvent>(_getFirstData);  }  FutureOr<void> _getFirstData(ProductFirstGetByStatusEvent event,      Emitter<FirstProductState> emit)async{    emit(ProductFirstLoadingState());    firstPage++;    QueryParams params = QueryParams();    params.append('status_id', event.id);    params.append('page', firstPage);    params.append('limit', limit);    try{      List<Catalog> list =    await repository.getByStatus(event.id,          params);      first.addAll(list);      emit(ProductFirstLoaded(first));    }catch(_){      firstPage--;      emit(ProductFirstErrorState());    }  }}
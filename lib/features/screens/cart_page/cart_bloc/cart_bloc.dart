import 'dart:async';import 'package:bloc/bloc.dart';import 'package:equatable/equatable.dart';import 'package:intex_mobile_app/core/models/Order.dart';import 'package:intex_mobile_app/core/repository/cart_repository.dart';part 'cart_event.dart';part 'cart_state.dart';class CartBloc extends Bloc<CartEvent, CartState> {  Order? order;  final CartRepository repository;  CartBloc(this.repository) : super(CartInitial()) {    on<CartInitEvent>(_init);    on<CartAddEvent>(_add);    on<CartRemoveEvent>(_remove);    on<CartSendtEvent>(_send);    on<CartRequestEvent>(_requestCall);  }  FutureOr<void> _init(CartInitEvent event,Emitter<CartState> emit)  async{    emit(CartUpdateState(event.order));  }  FutureOr<void> _add(CartAddEvent event,Emitter<CartState> emit)  async{    final state = this.state;    if(state is CartUpdateState){      final Order order = repository.addCount(state.order);      emit(CartUpdateState(order));    }  }  FutureOr<void> _remove(CartRemoveEvent event,Emitter<CartState>  emit)async{    final state = this.state;   if(state is CartUpdateState){     final Order order = repository.removeCount(state.order);     emit(CartUpdateState(order));   }  }  FutureOr<void> _send(CartSendtEvent event,Emitter<CartState> emit)  async{    final Order order = repository.addCount(event.order);    emit(CartUpdateState(order));  }  FutureOr<void> _requestCall(CartRequestEvent event,      Emitter<CartState> emit)async{   await repository.requestCall(event.name,event.phone);    emit(CartInitial());  }}
import 'dart:async';import 'package:bloc/bloc.dart';import 'package:equatable/equatable.dart';import 'package:intex_mobile_app/core/models/Order.dart';import 'package:intex_mobile_app/core/repository/cart_repository.dart';part 'cart_event.dart';part 'cart_state.dart';class CartBloc extends Bloc<CartEvent, CartState> {  final CartRepository repository;  CartBloc(this.repository,) : super(CartInitial()) {    on<CartInitEvent>(_init);    on<CartAddEvent>(_add);    on<CartRemoveEvent>(_remove);    on<CartSendtEvent>(_send);    on<CartRequestEvent>(_requestCall);  }  FutureOr<void> _init(CartInitEvent event,Emitter<CartState> emit)  async{    emit(CartUpdateState(event.order));  }  FutureOr<void> _add(CartAddEvent event,Emitter<CartState> emit)  async{    emit( CartLoading());       repository.addCount();      emit(CartUpdateState(repository.order));  }  FutureOr<void> _remove(CartRemoveEvent event,Emitter<CartState>  emit)async{    emit( CartLoading());    repository.removeCount();     print(repository.order!.count);     emit(CartUpdateState(repository.order));  }  FutureOr<void> _send(CartSendtEvent event,Emitter<CartState> emit)  async{    emit(CartLoading());    try{   var res =  await repository.sendOrder();     emit(CartSuccessState());   }catch(_){     emit(CartErrorState(_.toString()));   }    //emit(CartUpdateState(order));  }  FutureOr<void> _requestCall(CartRequestEvent event,      Emitter<CartState> emit)async{   await repository.requestCall(event.name,event.phone);    emit(CartInitial());  }}
import 'dart:async';import 'package:bloc/bloc.dart';import 'package:equatable/equatable.dart';import 'package:intex_mobile_app/core/models/Catalog_model.dart';import 'package:intex_mobile_app/core/repository/product_by_status_repository.dart';import 'package:intex_mobile_app/core/service/query.dart';part 'second_product_event.dart';part 'second_product_state.dart';class SecondProductBloc extends Bloc<SecondProductEvent, SecondProductState> {  int secondPage =-1;  final ProductByStatusRepository repository;  List<Catalog> second = [];  final int limit = 4;  SecondProductBloc(this.repository) : super(SecondProductInitial()) {    on<ProductSecondGetByStatusEvent>(_getSecondData);  }  FutureOr<void> _getSecondData(ProductSecondGetByStatusEvent event,      Emitter<SecondProductState> emit)async{    emit(ProductSecondLoadingState());    secondPage++;    QueryParams params = QueryParams();    params.append('status_id', event.id);    params.append('page', secondPage);    params.append('limit', limit);    try{      List<Catalog> list =    await repository.getByStatus(event.id,          params);      second.addAll(list);      emit(ProductSecondLoaded(second));    }catch(_){      secondPage--;      emit(ProductSecondErrorState());    }  }}
import 'dart:async';import 'package:bloc/bloc.dart';import 'package:equatable/equatable.dart';import 'package:intex_mobile_app/core/models/Catalog_model.dart';import 'package:intex_mobile_app/core/repository/product_by_status_repository.dart';import 'package:intex_mobile_app/core/service/query.dart';part 'third_product_event.dart';part 'third_product_state.dart';class ThirdProductBloc extends Bloc<ThirdProductEvent, ThirdProductState> {  List<Catalog> third = [];  int thirdPage =-1;  final int limit = 4;  final ProductByStatusRepository repository;  ThirdProductBloc(this.repository) : super(ThirdProductInitial()) {    on<ProductThirdGetByStatusEvent>(_getThirdData);  }  FutureOr<void> _getThirdData(ProductThirdGetByStatusEvent event,      Emitter<ThirdProductState> emit)async{    emit(ProductThirdLoadingState());    thirdPage++;    QueryParams params = QueryParams();    params.append('status_id', event.id);    params.append('page', thirdPage);    params.append('limit', limit);    try{      List<Catalog> list =    await repository.getByStatus(event.id,          params);      third.addAll(list);      emit(ProductThirdLoaded(third));    }catch(_){      thirdPage--;      emit(ProductThirdErrorState());    }  }}
import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:intex_mobile_app/core/repository/catalog_repository.dart';import 'package:intex_mobile_app/core/repository/product_by_status_repository.dart';import 'package:intex_mobile_app/core/utils/product_category.dart';import 'package:intex_mobile_app/features/screens/cart_page/bloc/products_bloc.dart';import 'package:intex_mobile_app/features/screens/conect_page/view/connect_check/checker/check_servicde.dart';import 'package:intex_mobile_app/features/screens/conect_page/view/connect_check/checker/check_state.dart';import 'package:intex_mobile_app/features/screens/main_page/bloc/main_bloc.dart';import 'package:intex_mobile_app/features/screens/main_page/view/main_page.dart';class App extends StatelessWidget {   App({Key? key}) : super(key: key);   bool firstRun = false;  Future<bool> _onWillPop() async {    return false;  }  @override  Widget build(BuildContext context) {    return ValueListenableBuilder(        valueListenable: ConnectionStatusValueNotifier(),        builder: (context, ConnectionStatus status, child) {          return status == ConnectionStatus.online              ?         MultiBlocProvider(providers: [           BlocProvider(             create: (context) => MainBloc(repository: Repository())               ..add(MainInitialEvent()),           ),           BlocProvider(             create: (context) => ProductsBloc(repository:             ProductByStatusRepository())           )         ], child: MainPage())              : Scaffold(                  drawerEnableOpenDragGesture: false,                  backgroundColor: Theme.of(context).dividerColor,                  appBar: AppBar(                    backgroundColor:                        Theme.of(context).bottomAppBarColor,                    toolbarHeight: 0,                  ),                  body: WillPopScope(                    onWillPop: _onWillPop,                    child: GestureDetector(                      behavior: HitTestBehavior.opaque,                      onPanDown: (_) {                        FocusScope.of(context)                            .requestFocus(FocusNode());                      },                      child: const Center(                        child: Text('s'),                      ),                    ),                  ));        });  }}